# vim: ft=sh

if [ -z "$CDD_FILE" ]; then
  CDD_FILE=~/.cdd
fi
export CDD_FILE

if [ -z "$CDD_AUTO" ]; then
  CDD_AUTO=1
fi
export CDD_AUTO

CDD_SESSION=
CDD_WINDOW=
CDD_PANE=

if [ -n "$TMUX" ]; then
  _cdd_key=$(tmux display -p '#S,#I.#P')
  _cdd_window_pane="${_cdd_key##*,}"
  CDD_SESSION="${_cdd_key%,*}"
  CDD_WINDOW="${_cdd_window_pane%%.*}"
  CDD_PANE="${_cdd_window_pane#*.}"
  if ! echo "$CDD_SESSION" | grep '[^0-9]' >/dev/null; then
    CDD_SESSION=_
  fi
  unset _cdd_key _cdd_window_pane

elif [ -n "$STY" ]; then
  _cdd_host=$(hostname)
  CDD_SESSION="${STY#*.}"
  if echo "$CDD_SESSION" | grep "^[^.]\+\.${_cdd_host%%.*}$" >/dev/null; then
    CDD_SESSION=_
  fi
  CDD_WINDOW="$WINDOW"
  CDD_PANE=0
  unset _cdd_host
fi

export CDD_SESSION CDD_WINDOW CDD_PANE


cdd() {
  if [ $# -eq 0 ]; then
    _cdd_cd last
    return $?
  fi

  case "$1" in
    help|--help|-h)
      _cdd_help
      return
      ;;
    add)
      if [ $# -eq 2 -o $# -eq 3 ]; then
        _cdd_add "$2" "$3"
        return $?
      fi
      ;;
    delete)
      if [ $# -eq 2 ]; then
        _cdd_delete "$2"
        return $?
      fi
      ;;
    *)
      if [ $# -eq 1 ]; then
        _cdd_cd "$1"
        return $?
      fi
  esac

  _cdd_help
  return 1
}


_cdd_chpwd() {
  (($CDD_AUTO)) || return

  if [ -n "$CDD_WINDOW" ]; then
    _cdd_register "$CDD_SESSION,$CDD_WINDOW.$CDD_PANE" "$PWD"
  fi
  _cdd_register last "$PWD"
}


_cdd_help() {
  cat <<-'__EOT__' >&2
		Usage:
		  cdd [last]
		  cdd <key>
		  cdd add <key> [path]
		  cdd delete <key>
		  cdd help|--help|-h

	__EOT__
  if [ -f "$CDD_FILE" ]; then
    sort "$CDD_FILE" >&2
  fi
}


_cdd_cd() {
  if [ ! -f "$CDD_FILE" ]; then
    echo "cdd: $CDD_FILE: No such file" >&2
    return 2
  fi

  local key=$(_cdd_canonicalize_key "$1")

  local _IFS="$IFS"
  IFS=$'\n'
  local match=$(grep "^$key:" "$CDD_FILE")
  IFS="$_IFS"

  if [ -n "$match" ]; then
    local _path="${match##*:}"
    echo "cd $_path"
    _path=$(echo "$_path" | sed "s:^~:$HOME:")
    cd "$_path"

  else
    echo "cdd: $key: No such key\n" >&2
    _cdd_help
    return 3
  fi
}


_cdd_add() {
  local key="$1"
  local _path="$2"

  local __path
  if [ -n "$_path" ]; then
    local _cdd_auto="$CDD_AUTO"
    CDD_AUTO=0
    __path=$(cd "$_path" >/dev/null 2>&1 && pwd); result=$?
    CDD_AUTO="$_cdd_auto"
    if [ "$result" -ne 0 ]; then
      echo "cdd: $_path: No such directory\n" >&2
      _cdd_help
      return 4
    fi
  else
    __path="$PWD"
  fi

  _cdd_register "$key" "$__path"
}


_cdd_delete() {
  if [ ! -f "$CDD_FILE" ]; then
    echo "cdd: $CDD_FILE: No such file" >&2
    return 2
  fi

  local key=$(_cdd_canonicalize_key "$1")

  if grep "^$key:" "$CDD_FILE" >/dev/null; then
    sed -i -e "/^$key:/d" "$CDD_FILE"
  else
    echo "cdd: $key: No such key\n" >&2
    _cdd_help
    return 3
  fi
}


_cdd_canonicalize_key() {
  local key="${1%:*}"

  if echo "$key" | grep '^\(.\+,\)\?[0-9]\+\.\?$' >/dev/null; then
    if [ -n "${key##*.}" ]; then
      key="$key."
    fi
    key="${key}0"
  fi
  if echo "$key" | grep '^[0-9]\+.[0-9]\+$' >/dev/null; then
    key="${CDD_SESSION:-_},$key"
  fi

  echo "$key"
}


_cdd_register() {
  local key="$1"
  local _path="$2"

  if [ -f "$CDD_FILE" ]; then
    sed -i -e "/^$key\:/d" "$CDD_FILE"
  fi

  _path=$(echo "$_path" | sed "s:^$HOME:~:")
  echo "$key:$_path" >>"$CDD_FILE"
}


if [ -n "$ZSH_VERSION" ]; then

  _cdd() {
    typeset -A opt_args
    local context state line

    _arguments '*: :->args' && return
    [[ $state = args ]] || return

    local ret=1
    local command="$line[1]"
    local -a opts

    if (( CURRENT == 4 )) && [[ $command = add ]]; then
      opts=($(ls -F | sed -n '/\/$/s!/$!!p'))
      _describe 'directory' opts && ret=0

    elif (( CURRENT == 3 )) && [[ $command = delete ]] || (( CURRENT == 2 ))
    then
      if [ -f "$CDD_FILE" ]; then
        local _IFS="$IFS"
        IFS=$'\n'
        opts=($(sed -e "s/^${CDD_SESSION:-_},//" -e 's/\.0:/:/' "$CDD_FILE"))
        IFS="$_IFS"
        _describe 'path' opts && ret=0
      fi
    fi

    if (( CURRENT == 2 )); then
      local _cdd_file=$(echo "$CDD_FILE" | sed "s:^$HOME:~:")
      opts=(
        "add:add path to $_cdd_file"
        "delete:delete path from $_cdd_file"
      )
      _describe -t commands 'cdd command' opts && ret=0
    fi

    return ret
  }
  compdef _cdd cdd

elif [ -n "$BASH_VERSION" ]; then

  _cdd() {
    local CURRENT=$(($COMP_CWORD + 1))
    local command="${COMP_WORDS[1]}"
    local opts=

    if (( CURRENT == 4 )) && [[ $command = add ]]; then
      opts=$(ls -F | sed -n '/\/$/s!/$!!p')

    elif (( CURRENT == 3 )) && [[ $command = delete ]] || (( CURRENT == 2 ))
    then
      if [ -f "$CDD_FILE" ]; then
        opts=$(sed -e "s/^${CDD_SESSION:-_},//" -e 's/ /\\\\ /g' "$CDD_FILE")
      fi
    fi

    if (( CURRENT == 2 )); then
      opts="${opts}"$'\n'add$'\n'delete
    fi

    local _IFS="$IFS"
    IFS=$'\n'
    COMPREPLY=($(compgen -W "$opts" -- "${COMP_WORDS[COMP_CWORD]}"))
    IFS="$_IFS"
  }
  complete -F _cdd cdd

fi
